<?xml version="1.0" encoding="UTF-8"?>
<document>

    <body>

        <h3>In a Camel Route</h3>
        <p>
            Once installed, the processor could be used in a Camel route.
        </p>
        <p>
            The following example show how to use it:
        </p>
        <p>
            <code>
&lt;from uri="timer:foo?period=5000"/&gt;<br/>
&lt;setHeader headerName="MASHUP_ID"&gt;<br/>
&nbsp; &lt;constant&gt;scenario1&lt;/constant&gt;<br/>
&lt;/setHeader&gt;<br/>
&lt;setHeader headerName="MASHUP_STORE"&gt;<br/>
&nbsp; &lt;constant&gt;/path/to/store&lt;/constant&gt;<br/>
&lt;/setHeader&gt;<br/>
&lt;setHeader headerName="LOGIN"&gt;<br/>
&nbsp; &lt;constant&gt;user1&lt;/constant&gt;<br/>
&lt;/setHeader&gt;<br/>
&lt;to ref="mashup"/&gt;<br/>
&lt;to uri="log:"/&gt;
            </code>
        </p>
        <p>
            The MASHUP_ID header is important as it informs the mashup processor which scenario file should be used.
        </p>
        <p>
            The LOGIN header will be replaced in the mashup file when %LOGIN% is used in URL.
        </p>
        <p>
            The mashup ref is a reference to the mashup processor bean. The bean is define using Blueprint or Spring.
            It looks like:
        </p>
        <p>
            <code>
&lt;bean id="mashup" class="org.apache.camel.processor.core.MashupProcessor"/&gt;<br/>
            </code>
        </p>
        <p>
            The mashup processor populate the Camel exchange out message with the extracted data. Each extractor is isolated
            with the extractor tag.
        </p>

    </body>

</document>