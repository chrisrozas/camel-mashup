<?xml version="1.0" encoding="UTF-8"?>
<document>

    <body>
        <h3>Configuration</h3>
        <p>
            The mashup processor loads a mashup file. This file describe the navigation between several pages
            and the data extraction policy.
        </p>
        <p>
            A mashup file looks like:
        </p>
        <p>
            <code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br/>
&lt;mashup id="test"&gt;<br/>

&nbsp; &lt;cookiestore key="%LOGIN%"/&gt;<br/>

&nbsp; &lt;proxy scheme="NTLM" host="ip" port="80" username="user" password="password" workstation="workstation" domain="domain"/&gt;<br/>

&nbsp; &lt;page url="http://www.example.org/page1" method="POST"/&gt;<br/>

&nbsp; &lt;page url="http://www.example.org/page2" wait="3"&gt;<br/>
&nbsp; &nbsp; &lt;extractor clazz="my.class" mandatory="false"&gt;<br/>
&nbsp; &nbsp; &nbsp; &lt;property name="name1"&gt;<br/>
&nbsp; &nbsp; &nbsp; &nbsp; &lt;!CDATA[[value1]]&gt;<br/>
&nbsp; &nbsp; &nbsp; &lt;/property&gt;<br/>
&nbsp; &nbsp; &lt;/extractor&gt;<br/>
&nbsp; &lt;/page&gt;<br/>

&nbsp; &lt;page&gt;<br/>
&nbsp; &nbsp; &lt;url&gt;http://www.example.org/page3"&lt;/url&gt;<br/>
&nbsp; &nbsp; &lt;param name="param1" value="value1"/&gt;<br/>
&nbsp; &nbsp; &lt;param name="param2" value="value2"/&gt;<br/>
&nbsp; &nbsp; &lt;extractor clazz="other.class" append="false"/&gt;<br/>
&nbsp; &nbsp; &lt;errorhandler&gt;<br/>
&nbsp; &nbsp; &nbsp; &lt;extractor clazz="my.class"&gt;<br/>
&nbsp; &nbsp; &nbsp; &lt;property name="name2"&gt;<br/>
&nbsp; &nbsp; &nbsp; &nbsp; &lt;!CDATA[[value2]]&gt;<br/>
&nbsp; &nbsp; &nbsp; &lt;/property&gt;<br/>
&nbsp; &nbsp; &nbsp; &lt;/extractor&gt;<br/>
&nbsp; &nbsp; &lt;/errorhandler&gt;<br/>
&nbsp; &lt;/page&gt;<br/>

&lt;/mashup&gt;
            </code>
        </p>
        <p>
            The cookiestore tag allows you to configure a cookie store. Camel Mashup is able to store cookies and map
            a cookie to a Camel header (using %HEADER% notation). All HTTP client cookies are stored in the store and
            injected in the next iteration.
        </p>
        <p>
            The proxy tag allows you to configure a HTTP proxy. It supports both Basic and NTLM authentication.
        </p>
        <p>
            The page tag is a HTTP page, connecting using the URL attribute. By default, the HTTP method used is GET, but
            you can specify POST with the method attribute. You can also set a wait on a page. The wait (in seconds)
            suspends the thread (to wait a redirection for instance).
        </p>
        <p>
            On each page, you can define a set of extractor. An extractor is a bean implementing IExtractor interface.
            An extractor is mandatory by default: it means that if it doesn't extract any data, an exception will be raised.
            You can define an extractor as optional with false for the mandatory attribute.
            By default, an extractor will populate the Camel exchange out message with the extracted data. If you
            don't want to populate the out message (for instance, you only want to check if the extract pattern is
            present), you can set the append attribute to false.
        </p>
        <p>
            When an extractor fails, you can define an error handler. An error handler is another set of extractor.
            The purpose is to be able to extract error message from the page, in case of first extractor failure.
        </p>
        <p>
            By default, the following extractor are available: CoupleExtractor, RegexExtractor, JsoupExtractor, XPathExtractor.
        </p>
    </body>

</document>